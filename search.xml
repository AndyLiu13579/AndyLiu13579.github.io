<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[利用localStorage记录用户输入历史数据]]></title>
    <url>%2Fposts%2F56017bc5.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930# 第一步，根据要记录的数据字段，记录到localstorage里面，根据key识别存储，一个项目中不同的存储用不同的key如这里所用的xxx_xxx_localStorageKey&lt;script type="text/javascript"&gt; function setproHisNo(proNo, cityid, certType) &#123; if (localStorage) &#123; var saveNo = proNo + '|' + cityid + '|' + certType;//这里以存储电话号码，城市id，查询类型为例 var proNoJsonStr = localStorage.getItem('xxx_xxx_localStorageKey');//先查询key if (proNoJsonStr == null) &#123;//如果没有就新增为一个数组 var proNoArray = []; proNoArray[0] = saveNo; localStorage.setItem('xxx_xxx_localStorageKey', JSON.stringify(proNoArray)); &#125; else &#123;//如果有就直接取数 var proNoArray = JSON.parse(proNoJsonStr); var arrIndex = $.inArray(saveNo, proNoArray) if (arrIndex === -1) &#123; // 只保留最新的两条记录 if (proNoArray.length &gt;= 2) &#123;//这里按需求保存几条数据 proNoArray.splice(0, 1); &#125; &#125; else &#123; //有重复直接替换 proNoArray.splice(arrIndex, 1); &#125; proNoArray.push(saveNo); localStorage.setItem('xxx_xxx_localStorageKey', JSON.stringify(proNoArray)); &#125; &#125; &#125;&lt;/script&gt;123456# -- 第二步，获取数据&lt;div class="put"&gt;&lt;input type="text" id="certNum3" onfocus="getHistory()" oninput="getNum()"&gt;//鼠标点击输入框去获取历史数据，由于这里记录的数据需要脱敏展示，所以用了noinput事件&lt;a href="javascript:void(0);" class="close1" id="close2"&gt; &lt;img src="xxx/alt2.png" width="22"&gt;&lt;/a&gt;//把输入框输入的号码同步到下面的隐藏的输入框，最后提交隐藏输入框的数据&lt;input type="hidden" id="certNum2" value=""&gt;//隐藏输入框&lt;/div&gt;– 用户跳转到该页面展示第一条历史数据– 清空数据12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758function getHistory() &#123;//用户点击输入框获得第二条历史记录 var proHisNoArray = localStorage.getItem('szim_xzjd_localStorageKey'); var tarArray = JSON.parse(proHisNoArray); if (tarArray == null) &#123; return false; &#125; var list = ''; for (var i = 0; i &lt; tarArray.length - 1; i++) &#123;//prolist var str = tarArray[i].split("|"); var tmData = encryptData(str[0], str[1]); list += "&lt;li class = 'trline' style='list-style:none; position: relative;left:8px;top: 5px;' onclick=\"setData('" + str[0] + "','" + str[1] + "','" + str[2] + "')\" &gt;" + tmData + "&lt;/li&gt;" &#125; $("#proList").html(list); &#125; function setData(certNum, certType, cityId) &#123; var tmData = encryptData(certNum, certType); $('#certNum3').val(tmData); $('#certNum2').val(certNum); $('#certType2').val(certType); $('#cityList2').val(cityId); $("#proList").empty();//用户选择历史数据之后清除列表，达到下拉框的效果 &#125; function getNum() &#123;//把原始数据放到要提交的input下面 var proNum = $('#certNum3').val(); $('#certNum2').val(proNum) &#125; function cleNum() &#123;//清除显示框中和隐藏框中的值 $('#certNum3').val(""); $('#certNum2').val("") &#125; function encryptData(certNum, certType) &#123;//数据脱敏 var fzStr = certNum.split("").reverse().join("");//先反转字符串，脱敏后，再反过来 var len = certNum.length; var leftStr = ''; var rightStr = ''; if (certType === '01') &#123;//类型一脱敏 leftStr = fzStr.substring(0, 2); rightStr = fzStr.substring(4, len); &#125; if (certType === '02') &#123;//类型二 leftStr = fzStr.substring(0, 9); rightStr = fzStr.substring(11, len); &#125; if (certType === '03') &#123;//类型三 leftStr = fzStr.substring(0, 10); rightStr = fzStr.substring(12, len); &#125; var str = '**'; var finalproNum = leftStr + str + rightStr; finalproNum = finalproNum.split("").reverse().join(""); return finalproNum; &#125;]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle查大表新建临时表查询法]]></title>
    <url>%2Fposts%2F56017bc5.html</url>
    <content type="text"><![CDATA[123456789# 第一步，根据要查的字段把数据放到一个临时表CREATE TABLE TMP_PAY_LXP_2019 AS SELECT FUNC_NAME, METH_NAME, INVOKE_TIME FROM EM_T_INVOKE_FUNC_LOG F（临时表） WHERE F.FUNC_NAME = 'pay'（查询条件一） AND F.METH_NAME = 'recharge'（查询条件二） AND F.INVOKE_TIME BETWEEN TO_DATE('2019-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss') AND TO_DATE('2019-01-31 23:59:59','yyyy-mm-dd hh24:mi:ss');（查询时间，可以自己设置查询时间1-2,1-n月,2-n月等等）123456789# -- 再去查询临时表，获取数据SELECT TO_CHAR(INVOKE_TIME, 'yyyymmdd'), F.FUNC_NAME 功能名称, F.METH_NAME 方法入口, COUNT(*) FROM TMP_PAY_LXP_2019 F GROUP BY TO_CHAR(INVOKE_TIME, 'yyyymmdd'),（时间查询可以自己设定是具体到天还是月如yyyymm） F.FUNC_NAME, F.METH_NAME ORDER BY TO_CHAR(F.INVOKE_TIME, 'yyyymmdd') DESC;– 用完数据后，清空临时表数据，并删除临时表– 清空数据1TRUNCATE TABLE TMP_PAY_LXP_2019;– 删除表1DROP TABLE TMP_PAY_LXP_2019 PURGE;]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 建立分区]]></title>
    <url>%2Fposts%2F56017bc5.html</url>
    <content type="text"><![CDATA[Oracle建立分区分为有分区maxValue和无maxValue的两种情况123# 无maxValue的情况，直接执行下面的sql（按月分区），要建几个就根据不同需求建几个就行（TO_DATE里面放的东西，根据自己的需求放）alter table table_name add partition areaName(分区名字) VALUES LESS THAN (TO_DATE('2019-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) TABLESPACE USERS ;123# 有maxValue的情况下，如果直接建的话会报错，所以用下面的sqlalter table table_name split partition areaNamemax（当前分区的最大值） at(TO_DATE('2019-12-01 00:00:00',（要建的分区对应的时间） 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) into (partition areaName（新建分区的名字） , partition areaNamemax（当前分区的最大值）);删除一个分区1alter table table_name drop partition areaName（分区名字）查看自己建的分区1select table_name,partition_name,high_value from user_tab_partitions o where table_name='table_name'什么是当前分区的最大值，就是你查询出当前所有的分区（按月份分区得话），就是最后一个分区的名字，对应放上去就行了]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fposts%2F0.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[zookeeper 命令使用]]></title>
    <url>%2Fposts%2F56017bc5.html</url>
    <content type="text"><![CDATA[zkCli.sh123# 指定ip和端口，zkCli.sh默认进入的是2181端口# sh zkCli.sh -server localhsot:2170sh zkCli.sh -server ip:portzkServer.sh1234# 启动sh zkServer.sh start# 查看状态sh zkServersh status]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
</search>
